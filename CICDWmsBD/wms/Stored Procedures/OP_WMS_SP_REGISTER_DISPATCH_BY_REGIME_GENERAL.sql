--===================================================================
--Autor:			Elder Lucas
--Fecha:			11 de noviembre 2022
--Descripción:		SP que procecesa la cantidad de la lineas de picking desde la hand held simplicado
--===================================================================

CREATE PROCEDURE [wms].[OP_WMS_SP_REGISTER_DISPATCH_BY_REGIME_GENERAL] (
		@pLOGIN_ID VARCHAR(25)
		,@pCLIENT_OWNER VARCHAR(25)
		,@pMATERIAL_ID VARCHAR(50)
		,@pMATERIAL_BARCODE VARCHAR(25)
		,@pSOURCE_LICENSE NUMERIC(18, 0)
		,@pSOURCE_LOCATION VARCHAR(25)
		,@pQUANTITY_UNITS NUMERIC(18, 4)
		,@pCODIGO_POLIZA VARCHAR(25)
		,@pWAVE_PICKING_ID NUMERIC(18, 0)
		,@pSERIAL_NUMBER NUMERIC(18, 0)
		,@pTipoUbicacion VARCHAR(25)
		,@pMt2 NUMERIC(18, 2)
		,@pRESULT VARCHAR(300) OUTPUT
		,@pTASK_ID NUMERIC(18, 0) = NULL
		,@LICENSE_DISPATCH_ID INT = 0
	)
AS
BEGIN

	DECLARE
		@ErrorCode INT,
		@TOTAL_QTY_TL NUMERIC(18,6),
		@QTY_TOP1_TL NUMERIC(18,6),
		@QTY_UPDATE NUMERIC(18,6),
		@QTY_SUBTRACT_IXL NUMERIC(18,6),
		@QTY_TRANSACTION NUMERIC(18,6),
		@IS_FROM_SONDA INT,
		@pTASK_IS_CANCELED INT,
		@TRANSFER_REQUEST_ID INT,
		@SOURCE_TYPE VARCHAR(50),
		@TRANS_SUBTYPE VARCHAR(50),
		@TERMS_OF_TRADE VARCHAR(50),
		@INV_AVAILABLE NUMERIC(18, 6),
		@BATCH VARCHAR(50),
		@DATE_EXPIRATION DATETIME,
		@VIN VARCHAR(40),
		@PK_LINE INTEGER,
		@QTY_LICENSE NUMERIC(18, 4),
		@STATUS_CODE VARCHAR(100),
		@LOGIN_NAME VARCHAR(50),
		@CLIENT_ID_LOCAL VARCHAR(50),
		@CLIENT_NAME VARCHAR(100),
		@CLIENT_CODE VARCHAR(25),
		@HANDLE_SERIAL INT,
		@IS_MASTER_PACK INT,
		@HANDLE_BATCH INT,
		@MATERIAL_ID_LOCAL VARCHAR(100),
		@ALTERNATE_BARCODE VARCHAR(25),
		@MATERIAL_NAME VARCHAR(200),
		@WAREHOUSE_PARENT VARCHAR(50)
	
BEGIN TRY
	BEGIN TRANSACTION;
		
		UPDATE [wms].[OP_WMS_MASTER_PACK_HEADER]
			SET [QTY] = [QTY] - @pQUANTITY_UNITS
			WHERE [LICENSE_ID] = @pSOURCE_LICENSE
			AND [MATERIAL_ID] = @pMATERIAL_ID

		--ASIGNANCIÓN DE VARIABLES Y VALIDACIONES
		SET @QTY_TRANSACTION = @pQUANTITY_UNITS
		SELECT TOP 1
			@LOGIN_NAME = [D].[LOGIN_NAME]
		FROM
			[wms].[OP_WMS_FUNC_GETLOGIN_NAME](@pLOGIN_ID) [D];

		SELECT TOP 1
			 @CLIENT_ID_LOCAL = [L].[CLIENT_OWNER]
			,@CLIENT_NAME = [C].[CLIENT_NAME]
			,@CLIENT_CODE = [C].[CLIENT_CODE]
		FROM
			[wms].[OP_WMS_LICENSES] [L]
		INNER JOIN [wms].[OP_WMS_VIEW_CLIENTS] [C] ON [C].[CLIENT_CODE] = [L].[CLIENT_OWNER]
		WHERE
			[L].[LICENSE_ID] = @pSOURCE_LICENSE;

		SELECT TOP 1
			@MATERIAL_ID_LOCAL = [MATERIAL_ID]
			,@HANDLE_SERIAL = ISNULL([M].[SERIAL_NUMBER_REQUESTS],
										0)
			,@IS_MASTER_PACK = ISNULL([M].[IS_MASTER_PACK],
										0)
			,@HANDLE_BATCH = ISNULL([M].[BATCH_REQUESTED], 0)
			,@ALTERNATE_BARCODE = [M].[ALTERNATE_BARCODE]
			,@MATERIAL_NAME = [M].[MATERIAL_NAME]
		FROM
			[wms].[OP_WMS_MATERIALS] [M]
		WHERE
			(
				[M].[BARCODE_ID] = @pMATERIAL_BARCODE
				OR [M].[ALTERNATE_BARCODE] = @pMATERIAL_BARCODE
			)
			AND [M].[CLIENT_OWNER] = @CLIENT_ID_LOCAL;

		SELECT TOP 1
			@WAREHOUSE_PARENT = ISNULL([WAREHOUSE_PARENT],
										'BODEGA_DEF')
		FROM
			[wms].[OP_WMS_SHELF_SPOTS]
		WHERE
			[LOCATION_SPOT] = @pSOURCE_LOCATION;

		SELECT TOP 1
			@pTASK_IS_CANCELED = [T].[IS_CANCELED]
			,@IS_FROM_SONDA = [T].[IS_FROM_SONDA]
			,@TRANSFER_REQUEST_ID = [T].[TRANSFER_REQUEST_ID]
			,@SOURCE_TYPE = [T].[SOURCE_TYPE]
			,@TRANS_SUBTYPE = [T].[TASK_SUBTYPE]
		FROM
			[wms].[OP_WMS_TASK_LIST] [T]
		WHERE
			[WAVE_PICKING_ID] = @pWAVE_PICKING_ID
			AND [MATERIAL_ID] = @pMATERIAL_ID;

		IF (@pTASK_IS_CANCELED <> 0)
		BEGIN
			SELECT
				@pRESULT = 'ERROR, Tarea ha sido cancelada, verifique.'
				,@ErrorCode = 1202;
			RAISERROR (@pRESULT, 16, 1);
		END;

		SET @TOTAL_QTY_TL = (SELECT SUM(QUANTITY_PENDING) FROM WMS.OP_WMS_TASK_LIST WHERE WAVE_PICKING_ID = @pWAVE_PICKING_ID
																						AND MATERIAL_ID = @pMATERIAL_ID
																						AND LICENSE_ID_SOURCE = @pSOURCE_LICENSE
																						AND QUANTITY_PENDING > 0
																						AND IS_COMPLETED = 0)

		--Ciclo de asignación de cantidades en lineas de task_list
		WHILE(@pQUANTITY_UNITS > 0)
		BEGIN
			SET @QTY_TOP1_TL = (SELECT TOP 1 QUANTITY_PENDING FROM WMS.OP_WMS_TASK_LIST WHERE WAVE_PICKING_ID = @pWAVE_PICKING_ID
																						AND MATERIAL_ID = @pMATERIAL_ID
																						AND LICENSE_ID_SOURCE = @pSOURCE_LICENSE
																						AND QUANTITY_PENDING > 0
																						AND IS_COMPLETED = 0
								)

			IF(@pQUANTITY_UNITS > @QTY_TOP1_TL)
			BEGIN
				PRINT CONCAT('CASO1: ', CAST(@pQUANTITY_UNITS AS VARCHAR), ' - ', CAST(@QTY_TOP1_TL AS VARCHAR))
				SET @QTY_SUBTRACT_IXL = @QTY_TOP1_TL
				SET @pQUANTITY_UNITS -= @QTY_TOP1_TL
				SET @QTY_UPDATE = 0
				SET @QTY_TOP1_TL = 0
				PRINT '@QTY_UPDATE'
				PRINT @QTY_UPDATE
				PRINT '@QTY_TOP1_TL'
				PRINT @QTY_TOP1_TL
			END
			ELSE IF(@pQUANTITY_UNITS < @QTY_TOP1_TL)
			BEGIN
				PRINT CONCAT('CASO2: ', CAST(@pQUANTITY_UNITS AS VARCHAR), ' - ', CAST(@QTY_TOP1_TL AS VARCHAR))
				SET @QTY_SUBTRACT_IXL = @pQUANTITY_UNITS
				SET @QTY_UPDATE = @QTY_TOP1_TL - @pQUANTITY_UNITS
				SET @QTY_TOP1_TL -= @pQUANTITY_UNITS 
				SET @pQUANTITY_UNITS = 0
				PRINT '@QTY_UPDATE'
				PRINT @QTY_UPDATE
				PRINT '@QTY_TOP1_TL'
				PRINT @QTY_TOP1_TL
			END
			ELSE
			BEGIN
				PRINT CONCAT('CASO3: ', CAST(@pQUANTITY_UNITS AS VARCHAR), ' - ', CAST(@QTY_TOP1_TL AS VARCHAR))
				SET @QTY_SUBTRACT_IXL = @pQUANTITY_UNITS
				SET @pQUANTITY_UNITS = 0
				SET @QTY_UPDATE = 0
				SET @QTY_TOP1_TL = 0
				PRINT '@QTY_UPDATE'
				PRINT @QTY_UPDATE
				PRINT '@QTY_TOP1_TL'
				PRINT @QTY_TOP1_TL
			END

			UPDATE TOP (1) WMS.OP_WMS_TASK_LIST
				SET QUANTITY_PENDING = @QTY_UPDATE,
					IS_COMPLETED = IIF(@QTY_TOP1_TL <= 0, 1, 0),
					COMPLETED_DATE = IIF(@QTY_TOP1_TL <= 0, GETDATE(), NULL)
				WHERE WAVE_PICKING_ID = @pWAVE_PICKING_ID
				AND MATERIAL_ID = @pMATERIAL_ID
				AND LICENSE_ID_SOURCE = @pSOURCE_LICENSE
				AND QUANTITY_PENDING > 0
				AND IS_COMPLETED = 0

			--Actualizamos cantidad en licencia
			UPDATE WMS.OP_WMS_INV_X_LICENSE
				SET QTY -= @QTY_SUBTRACT_IXL,
				[LAST_UPDATED] = GETDATE(),
				[LAST_UPDATED_BY] = @pLOGIN_ID
				WHERE LICENSE_ID = @pSOURCE_LICENSE AND MATERIAL_ID = @pMATERIAL_ID
			
		END

		--Actualización de última modificación de licencia
		UPDATE [wms].[OP_WMS_LICENSES]
			SET	[LAST_UPDATED] = GETDATE(),
			[LAST_UPDATED_BY] = @pLOGIN_ID
			WHERE
			[LICENSE_ID] = @pSOURCE_LICENSE

		--Insertamos transacción
		IF @HANDLE_SERIAL = 1
		BEGIN
			INSERT	INTO [wms].[OP_WMS_TRANS]
					(
						[TERMS_OF_TRADE]
						,[TRANS_DATE]
						,[LOGIN_ID]
						,[LOGIN_NAME]
						,[TRANS_TYPE]
						,[TRANS_DESCRIPTION]
						,[TRANS_EXTRA_COMMENTS]
						,[MATERIAL_BARCODE]
						,[MATERIAL_CODE]
						,[MATERIAL_DESCRIPTION]
						,[MATERIAL_TYPE]
						,[MATERIAL_COST]
						,[SOURCE_LICENSE]
						,[TARGET_LICENSE]
						,[SOURCE_LOCATION]
						,[TARGET_LOCATION]
						,[CLIENT_OWNER]
						,[CLIENT_NAME]
						,[QUANTITY_UNITS]
						,[SOURCE_WAREHOUSE]
						,[TARGET_WAREHOUSE]
						,[TRANS_SUBTYPE]
						,[CODIGO_POLIZA]
						,[LICENSE_ID]
						,[STATUS]
						,[WAVE_PICKING_ID]
						,[TASK_ID]
						,[IS_FROM_SONDA]
						,[BATCH]
						,[DATE_EXPIRATION]
						,[SERIAL]
						,[STATUS_CODE]
					)
			SELECT
				@TERMS_OF_TRADE
				,GETDATE()
				,@pLOGIN_ID
				,@LOGIN_NAME
				,'DESPACHO_GENERAL'
				,ISNULL((SELECT TOP 1
								[PARAM_CAPTION]
							FROM
								[wms].[OP_WMS_FUNC_GETTRANS_DESC]('DESPACHO_GENERAL')),
						'DESPACHO GENERAL')
				,NULL
				,@pMATERIAL_BARCODE
				,@MATERIAL_ID_LOCAL
				,(SELECT TOP 1
						*
					FROM
						[wms].[OP_WMS_FUNC_GETMATERIAL_DESC](@pMATERIAL_BARCODE,
											@CLIENT_ID_LOCAL))
				,NULL
				,[wms].[OP_WMS_FN_GET_MATERIAL_COST_BY_MATERIAL](@MATERIAL_ID_LOCAL,
											@CLIENT_ID_LOCAL)
				,@pSOURCE_LICENSE
				,NULL
				,@pSOURCE_LOCATION
				,'PUERTA_1'
				,@CLIENT_ID_LOCAL
				,(SELECT TOP 1
						*
					FROM
						[wms].[OP_WMS_FUNC_GETCLIENT_NAME](@CLIENT_ID_LOCAL))
				,-1
				,@WAREHOUSE_PARENT
				,NULL
				,@TRANS_SUBTYPE
				,@pCODIGO_POLIZA
				,@pSOURCE_LICENSE
				,'PROCESSED'
				,@pWAVE_PICKING_ID
				,@pWAVE_PICKING_ID
				,@IS_FROM_SONDA
				,@BATCH
				,@DATE_EXPIRATION
				,[S].[SERIAL]
				,@STATUS_CODE
			FROM
				[wms].[OP_WMS_MATERIAL_X_SERIAL_NUMBER] [S]
			INNER JOIN [wms].[OP_WMS_TASK_LIST] [T] ON [T].[WAVE_PICKING_ID] = [S].[WAVE_PICKING_ID]
											AND [S].[LICENSE_ID] = [T].[LICENSE_ID_SOURCE]
											AND [S].[MATERIAL_ID] = [T].[MATERIAL_ID]
											AND [T].[TASK_ASSIGNEDTO] = [S].[ASSIGNED_TO]
			WHERE
				[S].[WAVE_PICKING_ID] = @pWAVE_PICKING_ID
				AND [T].[TASK_ASSIGNEDTO] = @pLOGIN_ID
				AND [S].[STATUS] = 2;

		END;
		ELSE
		BEGIN
			INSERT	INTO [wms].[OP_WMS_TRANS]
					(
						[TERMS_OF_TRADE]
						,[TRANS_DATE]
						,[LOGIN_ID]
						,[LOGIN_NAME]
						,[TRANS_TYPE]
						,[TRANS_DESCRIPTION]
						,[TRANS_EXTRA_COMMENTS]
						,[MATERIAL_BARCODE]
						,[MATERIAL_CODE]
						,[MATERIAL_DESCRIPTION]
						,[MATERIAL_TYPE]
						,[MATERIAL_COST]
						,[SOURCE_LICENSE]
						,[TARGET_LICENSE]
						,[SOURCE_LOCATION]
						,[TARGET_LOCATION]
						,[CLIENT_OWNER]
						,[CLIENT_NAME]
						,[QUANTITY_UNITS]
						,[SOURCE_WAREHOUSE]
						,[TARGET_WAREHOUSE]
						,[TRANS_SUBTYPE]
						,[CODIGO_POLIZA]
						,[LICENSE_ID]
						,[STATUS]
						,[WAVE_PICKING_ID]
						,[TASK_ID]
						,[IS_FROM_SONDA]
						,[BATCH]
						,[DATE_EXPIRATION]
						,[SOURCE_TYPE]
						,[TRANSFER_REQUEST_ID]
						,[VIN]
						,[STATUS_CODE]
					)
			VALUES
					(
						@TERMS_OF_TRADE
						,GETDATE()
						,@pLOGIN_ID
						,@LOGIN_NAME
						,'DESPACHO_GENERAL'
						,ISNULL((SELECT TOP 1
										[PARAM_CAPTION]
									FROM
										[wms].[OP_WMS_FUNC_GETTRANS_DESC]('DESPACHO_GENERAL')),
								'DESPACHO GENERAL')
						,NULL
						,@pMATERIAL_BARCODE
						,@MATERIAL_ID_LOCAL
						,(SELECT TOP 1
								*
							FROM
								[wms].[OP_WMS_FUNC_GETMATERIAL_DESC](@pMATERIAL_BARCODE,
											@CLIENT_ID_LOCAL))
						,NULL
						,[wms].[OP_WMS_FN_GET_MATERIAL_COST_BY_MATERIAL](@MATERIAL_ID_LOCAL,
											@CLIENT_ID_LOCAL)
						,@pSOURCE_LICENSE
						,NULL
						,@pSOURCE_LOCATION
						,'PUERTA_1'
						,@CLIENT_ID_LOCAL
						,@CLIENT_NAME
						,(@QTY_TRANSACTION * -1)
						,@WAREHOUSE_PARENT
						,NULL
						,@TRANS_SUBTYPE
						,@pCODIGO_POLIZA
						,@pSOURCE_LICENSE
						,'PROCESSED'
						,@pWAVE_PICKING_ID
						,@pWAVE_PICKING_ID
						,@IS_FROM_SONDA
						,@BATCH
						,@DATE_EXPIRATION
						,@SOURCE_TYPE
						,@TRANSFER_REQUEST_ID
						,@VIN
						,@STATUS_CODE
					);
		END;


COMMIT TRANSACTION;
			SELECT
			1 AS [Resultado]
			,'Proceso Exitoso' [Mensaje]
			,0 [Codigo]
			,CAST(@LICENSE_DISPATCH_ID AS VARCHAR) [DbData];
END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION;

		SELECT
			@ErrorCode = IIF(@@ERROR <> 0, @@ERROR, @ErrorCode);
		SELECT
			-1 AS [Resultado]
			,ERROR_MESSAGE() AS [Mensaje]
			,@ErrorCode AS [Codigo]
			,'' AS [DbData];

		SELECT
			@pRESULT = ERROR_MESSAGE();
	END CATCH;

END