CREATE TABLE [wms].[OP_WMS_INV_X_LICENSE] (
    [PK_LINE]                                    NUMERIC (18)     IDENTITY (1, 1) NOT NULL,
    [LICENSE_ID]                                 NUMERIC (18)     NOT NULL,
    [MATERIAL_ID]                                VARCHAR (50)     NOT NULL,
    [MATERIAL_NAME]                              VARCHAR (150)    NULL,
    [QTY]                                        NUMERIC (18, 4)  NOT NULL,
    [VOLUME_FACTOR]                              NUMERIC (18)     NULL,
    [WEIGTH]                                     NUMERIC (18, 2)  NULL,
    [SERIAL_NUMBER]                              VARCHAR (50)     NULL,
    [COMMENTS]                                   VARCHAR (250)    NULL,
    [LAST_UPDATED]                               DATETIME         NULL,
    [LAST_UPDATED_BY]                            VARCHAR (25)     NULL,
    [BARCODE_ID]                                 VARCHAR (25)     NULL,
    [TERMS_OF_TRADE]                             VARCHAR (50)     NULL,
    [STATUS]                                     VARCHAR (25)     CONSTRAINT [DF_OP_WMS_INV_X_LICENSE_STATUS] DEFAULT ('PROCESSED') NULL,
    [CREATED_DATE]                               DATETIME         CONSTRAINT [DF_OP_WMS_INV_X_LICENSE_CREATED_DATE] DEFAULT (getdate()) NULL,
    [DATE_EXPIRATION]                            DATE             NULL,
    [BATCH]                                      VARCHAR (50)     NULL,
    [ENTERED_QTY]                                NUMERIC (18, 4)  NULL,
    [VIN]                                        VARCHAR (40)     NULL,
    [HANDLE_SERIAL]                              NUMERIC (18)     DEFAULT ((0)) NULL,
    [IS_EXTERNAL_INVENTORY]                      INT              DEFAULT ((0)) NOT NULL,
    [IS_BLOCKED]                                 INT              DEFAULT ((0)) NOT NULL,
    [BLOCKED_STATUS]                             VARCHAR (250)    NULL,
    [STATUS_ID]                                  INT              NULL,
    [TONE_AND_CALIBER_ID]                        INT              DEFAULT (NULL) NULL,
    [LOCKED_BY_INTERFACES]                       INT              NULL,
    [ENTERED_MEASUREMENT_UNIT]                   VARCHAR (50)     NULL,
    [ENTERED_MEASUREMENT_UNIT_QTY]               NUMERIC (18, 4)  NULL,
    [ENTERED_MEASUREMENT_UNIT_CONVERSION_FACTOR] NUMERIC (18, 4)  NULL,
    [CODE_SUPPLIER]                              VARCHAR (50)     NULL,
    [NAME_SUPPLIER]                              VARCHAR (100)    NULL,
    [IDLE]                                       INT              DEFAULT ((0)) NOT NULL,
    [NUMBER_OF_COMPLETE_RELOCATIONS]             INT              DEFAULT ((0)) NOT NULL,
    [NUMBER_OF_PARTIAL_RELOCATIONS]              INT              DEFAULT ((0)) NOT NULL,
    [NUMBER_OF_PHYSICAL_COUNTS]                  INT              DEFAULT ((0)) NOT NULL,
    [PROJECT_ID]                                 UNIQUEIDENTIFIER NULL,
    [TOTAL_POSITION]                             INT              DEFAULT ((1)) NULL,
    CONSTRAINT [PK_OP_WMS_INV_X_LICENSE] PRIMARY KEY CLUSTERED ([PK_LINE] ASC) WITH (FILLFACTOR = 80),
    CONSTRAINT [CK_OP_WMS_INV_X_LICENSE] CHECK ([QTY]>=(0)),
    CONSTRAINT [OP_WMS_INV_X_LICENSE_QTY] CHECK ([QTY]>=(0)),
    CONSTRAINT [FK_OP_WMS_INV_X_LICENSE_OP_WMS_STATUS_OF_MATERIAL_BY_LICENSE_STATUS_ID] FOREIGN KEY ([STATUS_ID]) REFERENCES [wms].[OP_WMS_STATUS_OF_MATERIAL_BY_LICENSE] ([STATUS_ID])
);


GO
CREATE NONCLUSTERED INDEX [I_OP_WMS_INV_X_LICENSE_MATERIAL_ID]
    ON [wms].[OP_WMS_INV_X_LICENSE]([MATERIAL_ID] ASC, [QTY] ASC, [STATUS_ID] ASC)
    INCLUDE([SERIAL_NUMBER], [TERMS_OF_TRADE], [TONE_AND_CALIBER_ID], [VIN], [BARCODE_ID], [BATCH], [DATE_EXPIRATION], [HANDLE_SERIAL], [IS_EXTERNAL_INVENTORY], [LICENSE_ID], [LOCKED_BY_INTERFACES]) WITH (FILLFACTOR = 80);


GO
CREATE NONCLUSTERED INDEX [IX_OP_WMS_INV_X_LICENSE_1]
    ON [wms].[OP_WMS_INV_X_LICENSE]([MATERIAL_ID] ASC)
    INCLUDE([DATE_EXPIRATION], [LICENSE_ID], [QTY]) WITH (FILLFACTOR = 80);


GO
CREATE NONCLUSTERED INDEX [IX_OP_WMS_INV_X_LICENSE]
    ON [wms].[OP_WMS_INV_X_LICENSE]([LICENSE_ID] ASC, [MATERIAL_ID] ASC)
    INCLUDE([BARCODE_ID], [BATCH], [CREATED_DATE], [DATE_EXPIRATION], [ENTERED_QTY], [MATERIAL_NAME], [QTY], [TERMS_OF_TRADE], [TONE_AND_CALIBER_ID], [VIN]) WITH (FILLFACTOR = 80);


GO
CREATE NONCLUSTERED INDEX [IN_OP_WMS_INV_X_LICENSE_QTY_IS_BLOCKED]
    ON [wms].[OP_WMS_INV_X_LICENSE]([QTY] ASC, [IS_BLOCKED] ASC)
    INCLUDE([BATCH], [DATE_EXPIRATION], [HANDLE_SERIAL], [LICENSE_ID], [MATERIAL_ID], [MATERIAL_NAME], [TERMS_OF_TRADE], [VIN]) WITH (FILLFACTOR = 80);


GO
CREATE NONCLUSTERED INDEX [IDX_INV_X_LICENSE_VIN]
    ON [wms].[OP_WMS_INV_X_LICENSE]([VIN] ASC) WITH (FILLFACTOR = 80);


GO
CREATE NONCLUSTERED INDEX [IDX_INV_X_LICENSE_STATUS]
    ON [wms].[OP_WMS_INV_X_LICENSE]([LICENSE_ID] ASC, [MATERIAL_ID] ASC, [STATUS_ID] ASC) WITH (FILLFACTOR = 80);


GO
CREATE NONCLUSTERED INDEX [IDX_INV_X_LICENSE_MATERIAL_LICENSE_STATUS]
    ON [wms].[OP_WMS_INV_X_LICENSE]([LICENSE_ID] ASC, [MATERIAL_ID] ASC, [MATERIAL_NAME] ASC, [QTY] ASC, [STATUS_ID] ASC) WITH (FILLFACTOR = 80);


GO
CREATE NONCLUSTERED INDEX [IN_OP_WMS_INV_X_LICENSE_LICENSE_ID]
    ON [wms].[OP_WMS_INV_X_LICENSE]([LICENSE_ID] ASC)
    INCLUDE([IS_BLOCKED], [LOCKED_BY_INTERFACES]) WITH (FILLFACTOR = 80);


GO
CREATE NONCLUSTERED INDEX [IDX_QTY_LOCKED_BY_INTERFACES_INV_X_LICENSE]
    ON [wms].[OP_WMS_INV_X_LICENSE]([QTY] ASC, [LOCKED_BY_INTERFACES] ASC)
    INCLUDE([DATE_EXPIRATION], [LICENSE_ID], [STATUS_ID], [MATERIAL_ID]) WITH (FILLFACTOR = 80);


GO
CREATE NONCLUSTERED INDEX [IDX_QTY_VOLUME_FACTOR_INV_X_LICENSE]
    ON [wms].[OP_WMS_INV_X_LICENSE]([LICENSE_ID] ASC)
    INCLUDE([MATERIAL_ID], [QTY], [VOLUME_FACTOR]) WITH (FILLFACTOR = 80);


GO
CREATE NONCLUSTERED INDEX [IN_OP_WMS_INV_X_LICENSE_QTY]
    ON [wms].[OP_WMS_INV_X_LICENSE]([QTY] ASC)
    INCLUDE([BARCODE_ID], [BATCH], [DATE_EXPIRATION], [HANDLE_SERIAL], [IS_EXTERNAL_INVENTORY], [LICENSE_ID], [MATERIAL_ID], [MATERIAL_NAME], [SERIAL_NUMBER], [TERMS_OF_TRADE], [VIN]) WITH (FILLFACTOR = 80);


GO
CREATE NONCLUSTERED INDEX [IDX_INV_X_LICENSE_TOTAL_POSITION]
    ON [wms].[OP_WMS_INV_X_LICENSE]([LICENSE_ID] ASC)
    INCLUDE([TOTAL_POSITION]) WITH (FILLFACTOR = 80);


GO
CREATE NONCLUSTERED INDEX [INV_X_L_LOCKED]
    ON [wms].[OP_WMS_INV_X_LICENSE]([LOCKED_BY_INTERFACES] ASC, [PROJECT_ID] ASC, [PK_LINE] ASC, [QTY] ASC)
    INCLUDE([LICENSE_ID], [MATERIAL_ID], [DATE_EXPIRATION], [STATUS_ID]) WITH (FILLFACTOR = 80);


GO
CREATE NONCLUSTERED INDEX [OP_WMS_INV_X_LICENSE00G1]
    ON [wms].[OP_WMS_INV_X_LICENSE]([LOCKED_BY_INTERFACES] ASC, [PROJECT_ID] ASC, [PK_LINE] ASC, [QTY] ASC)
    INCLUDE([LICENSE_ID], [MATERIAL_ID], [MATERIAL_NAME], [TERMS_OF_TRADE], [DATE_EXPIRATION], [STATUS_ID]) WITH (FILLFACTOR = 80);


GO

-- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Modificado por: Michael Mazariegos 
-- fecha: 08/01/2021
-- descripcion: se agrego un else al trigger para que cuando se compruebe la condicion que evita los duplicados pueda insertar el nuevo dato.
-- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TRIGGER [wms].[EVITAR_DUPLICAR_LICENCIAS]
	ON [wms].[OP_WMS_INV_X_LICENSE]
	INSTEAD OF INSERT
	 AS
  			IF EXISTS (SELECT A.LICENSE_ID FROM WMS.OP_WMS_INV_X_LICENSE A INNER JOIN inserted B ON A.LICENSE_ID= B.LICENSE_ID AND A.MATERIAL_ID=B.MATERIAL_ID)
		BEGIN 
		
		PRINT 'LICENCIA YA EXISTE'
			--RAISERROR('LICENCIA YA EXISTE',16,1);
	  --    ROLLBACK TRANSACTION;
		END
	  ELSE
      BEGIN
	      INSERT INTO WMS.OP_WMS_INV_X_LICENSE (LICENSE_ID, MATERIAL_ID, MATERIAL_NAME, QTY, VOLUME_FACTOR, WEIGTH, SERIAL_NUMBER, COMMENTS, LAST_UPDATED, LAST_UPDATED_BY, BARCODE_ID, TERMS_OF_TRADE, STATUS, CREATED_DATE, DATE_EXPIRATION, BATCH, ENTERED_QTY, VIN, HANDLE_SERIAL, IS_EXTERNAL_INVENTORY, IS_BLOCKED, BLOCKED_STATUS, STATUS_ID, TONE_AND_CALIBER_ID, LOCKED_BY_INTERFACES, ENTERED_MEASUREMENT_UNIT, ENTERED_MEASUREMENT_UNIT_QTY, ENTERED_MEASUREMENT_UNIT_CONVERSION_FACTOR, CODE_SUPPLIER, NAME_SUPPLIER, IDLE, NUMBER_OF_COMPLETE_RELOCATIONS, NUMBER_OF_PARTIAL_RELOCATIONS, NUMBER_OF_PHYSICAL_COUNTS, PROJECT_ID, TOTAL_POSITION)
		    SELECT LICENSE_ID, MATERIAL_ID, MATERIAL_NAME, QTY, VOLUME_FACTOR, WEIGTH, SERIAL_NUMBER, COMMENTS, LAST_UPDATED, LAST_UPDATED_BY, BARCODE_ID, TERMS_OF_TRADE, STATUS, CREATED_DATE, DATE_EXPIRATION, BATCH, ENTERED_QTY, VIN, HANDLE_SERIAL, IS_EXTERNAL_INVENTORY, IS_BLOCKED, BLOCKED_STATUS, STATUS_ID,	TONE_AND_CALIBER_ID, LOCKED_BY_INTERFACES, ENTERED_MEASUREMENT_UNIT, ENTERED_MEASUREMENT_UNIT_QTY, ENTERED_MEASUREMENT_UNIT_CONVERSION_FACTOR, CODE_SUPPLIER, NAME_SUPPLIER, IDLE, NUMBER_OF_COMPLETE_RELOCATIONS, NUMBER_OF_PARTIAL_RELOCATIONS, NUMBER_OF_PHYSICAL_COUNTS, PROJECT_ID, TOTAL_POSITION
        FROM inserted;
		END


GO
DISABLE TRIGGER [wms].[EVITAR_DUPLICAR_LICENCIAS]
    ON [wms].[OP_WMS_INV_X_LICENSE];


GO
CREATE TRIGGER [wms].[Dup_lic] ON [wms].[OP_WMS_INV_X_LICENSE]
AFTER INSERT
AS

if exists ( select top 1 1 from [wms].[OP_WMS_INV_X_LICENSE] t 
    inner join inserted i on i.LICENSE_ID=t.LICENSE_ID and i.MATERIAL_ID=t.MATERIAL_ID AND i.PK_LINE <> t.PK_LINE)
begin
    rollback
    RAISERROR ('Duplicate Data', 16, 1);
end
